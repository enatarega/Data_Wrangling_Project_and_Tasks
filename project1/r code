---
output:
  pdf_document: default
---
Enat Arega 
\newline 
\noindent 
11/6/2018
\newline 
\noindent 
Homework 3
\newline 
\noindent 

\textbf{Question 1}
```{r}
library(tidyr)
library(dplyr)

table2 <- tidyr::table2
table4a <- tidyr::table4a
table4b <- tidyr::table4b

# rate calculation for table2

tabel_2 <- spread(table2, key=type, value=count)

rate_table2 <- tabel_2 %>% mutate(rate=10000*cases/population)


table4ab <- merge(table4a, table4b, by='country')

# An easier way of making a table with the required operations 

rate_table4ab <- table4ab %>% mutate(rate.1999=10000*`1999.x`/`1999.y`, 
rate.2000=10000*`2000.x`/`2000.y`)

data <- data.frame(country=rate_table4ab$country, case_1999=rate_table4ab$`1999.x`, 
pop_1999=rate_table4ab$`1999.y`, rate_1999=rate_table4ab$`rate.1999`, 
rate_2000=rate_table4ab$`rate.2000`, case_2000=rate_table4ab$`2000.x`, 
pop_2000=rate_table4ab$`2000.y`)

# number of TB cases per country per year 

data %>% select(country, case_1999) %>% filter(country=="Afghanistan")
data %>% select(country, case_1999) %>% filter(country=="Brazil")
data %>% select(country, case_1999) %>% filter(country=="China")

data %>% select(country, pop_1999) %>% filter(country=="Afghanistan")
data %>% select(country, pop_1999) %>% filter(country=="Brazil")
data %>% select(country, pop_1999) %>% filter(country=="China")

# population per country per year 

data %>% select(country, case_2000) %>% filter(country=="Afghanistan")
data %>% select(country, case_2000) %>% filter(country=="Brazil")
data %>% select(country, case_2000) %>% filter(country=="China")

data %>% select(country, pop_2000) %>% filter(country=="Afghanistan")
data %>% select(country, pop_2000) %>% filter(country=="Brazil")
data %>% select(country, pop_2000) %>% filter(country=="China")

# rate calculation for 1999

rate_afg <- (data %>% select(country, case_1999) %>% 
filter(country=="Afghanistan")*10000) / (data %>% 
select(country, pop_1999) %>% filter(country=="Afghanistan"))

rate_bra <- (data %>% select(country, case_1999) %>% 
filter(country=="Brazil")*10000)/data %>% select(country, pop_1999) %>% 
filter(country=="Brazil")

rate_china <- (data %>% select(country, case_1999) %>% 
filter(country=="China")*10000)/data %>% 
select(country, pop_1999) %>% filter(country=="China")

# rate calculation for 2000

rate_afg2 <- (data %>% select(country, case_2000) %>%
filter(country=="Afghanistan")*10000) / (data %>% select(country, pop_2000)
%>% filter(country=="Afghanistan"))

rate_bra2 <- (data %>% select(country, case_2000) %>% 
filter(country=="Brazil")*10000)/data %>% 
select(country, pop_2000) %>% filter(country=="Brazil")

rate_china2 <- (data %>% select(country, case_2000) %>% 
filter(country=="China")*10000)/data %>% select(country, pop_2000) %>% 
filter(country=="China")

# tabulating the calculations 

data1 <- data.frame(country=table4ab$country, case1999=table4ab$`1999.x`, 
pop1999=table4ab$`1999.y`, rate1999=c(rate_afg$case_1999, rate_bra$case_1999, 
rate_china$case_1999), case2000=table4ab$`2000.x`, pop2000=table4ab$`2000.y`, 
rate2000=c(rate_afg2$case_2000, rate_bra2$case_2000, rate_china2$case_2000))

```
\textbf{Question 2}
The code below is not working because the two columns (1999 and 2000) need to be in quotation. 
```{r}
# table4a %>% gather(1999, 2000, key="year", value="cases")
```
Below is the corrected code: 

```{r}
table4a %>% gather('1999','2000', key="year", value="cases")
```

\textbf{Question 3}
```{r}
# install.packages("tidyverse")

library(tidyverse)
library(lubridate)
library(nycflights13)
flights

# How does the distribution of flight times within a day change over the course of the year?

make_datetime_100 <- function(year, month, day, time) {
  make_datetime(year, month, day, time %/% 100, time %% 100)
}

flights_dt <- flights %>%
  filter(!is.na(dep_time), !is.na(arr_time)) %>%
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %>% 
  select(origin, dest, ends_with("delay"), ends_with("time"))

sched_dep <- flights_dt %>%
  mutate(minute = minute(sched_dep_time)) %>%
  group_by(minute) %>%
  summarise(
    avg_delay = mean(arr_delay, na.rm = TRUE),
    n = n())

flights_dt %>%
  mutate(time = hour(dep_time) * 100 + minute(dep_time),
         mon = as.factor(month
                         (dep_time))) %>%
  ggplot(aes(x = time, group = mon, colour = mon)) +
  geom_freqpoly(binwidth = 100)

# If you look at the graph below, there doesn't seem to be much difference in 
# distribution of flights within in day over the year 


# Compare dep_time, sched_dep_time and dep_delay. Are they consistent? Explain your findings.

flights_dt %>%
  mutate(dep_time_ = sched_dep_time + dep_delay * 60) %>%
  filter(dep_time_ != dep_time) %>%
  select(dep_time_, dep_time, sched_dep_time, dep_delay)

# In order for them to be consistent, dep_time = sched_dep_time + dep_delay. 
# However, this is not the case if you look at the table generated below. 
# There might be mistakes in the dates and these are flights in which the actual departure 
# time is on the next day relative to the scheduled departure time. 
# When creating the date-times, these were not accounted for. 
# Delay time must be added to account for crossing into the next day. 


# Confirm my hypothesis that the early departures of flights in minutes 20-30 and 50-60 
# are caused by scheduled flights that leave early. Hint: create a binary variable 
# that tells you whether or not a flight was delayed.

# Minute level, there doesnâ€™t appear to be anything:

flights_dt %>%
  mutate(early = dep_delay < 0,
         minute = minute(sched_dep_time)) %>%
  group_by(minute) %>%
  summarise(early = mean(early)) %>%
  ggplot(aes(x = minute, y = early)) +
  geom_point()

# When if grouped in 10 minute intervals, there is a higher 
# proportion of early flights during those minutes.

flights_dt %>%
  mutate(early = dep_delay < 0,
         minute = minute(sched_dep_time) %% 10) %>%
  group_by(minute) %>%
  summarise(early = mean(early)) %>%
  ggplot(aes(x = minute, y = early)) +
  geom_point()


```

\textbf{Question 4}
```{r}
# install.packages("rvest")

library(rvest)
scraping_qbs <- read_html("https://geiselmed.dartmouth.edu/qbs/")

# exploring the headings 
h1_text <- scraping_qbs %>% html_nodes("h1") %>% html_text()
h1_text
h2_text <- scraping_qbs %>% html_nodes("h2") %>% html_text()
h2_text
h3_text <- scraping_qbs %>% html_nodes("h3") %>% html_text()
h3_text

# Length of heading 3
length(h3_text)

# Looking at paragraphs 
p_nodes <- scraping_qbs %>% html_nodes("p")
p_nodes[10:20]
p_nodes[21]
length(p_nodes)

p_text <- scraping_qbs %>% html_nodes("p") %>% html_text()
length(p_text)
p_text[5]
p_text[5:10]

# Looking at unordered bullted list
ul_text <- scraping_qbs %>% html_nodes("ul") %>% html_text()
length(ul_text)
ul_text[1]
substr(ul_text[1], start=1, stop=40)

# Looking at lists 
li_text <- scraping_qbs %>% html_nodes("li") %>% html_text()
length(li_text)
li_text[1:8]

# Looking at lists within lists 
lii_text <- scraping_qbs %>% html_nodes("lii") %>% html_text() # found none
table_text<-scraping_qbs %>% html_nodes("table") %>% html_text()


# Looking at divisions: text irrespecive of headings, paragrpahs, lists, ordered list
all_text <- scraping_qbs %>% html_nodes("div") %>% html_text()

# Scraping a specific list
scraping_qbs %>% html_nodes("#menu-top-slide") %>% html_text()
